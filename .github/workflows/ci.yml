name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - '1.18'
    tags:
      - 'v1.18-*.*.*'
  pull_request:
    branches:
      - '1.18'

env:
  JAVA_DIST: 'zulu'
  JAVA_VERSION: 17
  MOD_ID: 'ponderjs'
  MOD_NAME: 'PonderJS'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DIST }}

      - name: Gradle Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x ./gradlew
          ./gradlew build --stacktrace --no-daemon

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v1.18-')
    steps:
      - name: Clone Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DIST }}

      - name: Gradle Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Assemble the jar
        run: |
          chmod +x ./gradlew
          ./gradlew jar --no-daemon

      - name: Collect version information
        run: |
          shopt -s failglob # print a warning if a glob does not match anything
          set_var() {
            echo $1="$2"
            echo $1="$2" >> $GITHUB_ENV
            declare -g $1="$2"
          }
          set_var JAR_FILE $(eval echo build/libs/${{ env.MOD_ID }}-*-*.jar)
          set_var MINECRAFT_VERSION $(echo ${JAR_FILE%.*} | cut -d- -f2)
          set_var MOD_VERSION $(echo ${JAR_FILE%.*} | cut -d- -f3)
          set_var RELEASE_TYPE "$(echo ${GITHUB_REF##*/} | cut -d- -f3)"
          set_var PRE_RELEASE "$([[ -z $RELEASE_TYPE ]] && echo false || echo true)"

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.MOD_NAME }}-${{ env.MINECRAFT_VERSION }}-${{ env.MOD_VERSION }}.jar
          path: ${{ env.JAR_FILE }}

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.JAR_FILE }}
          prerelease: ${{ env.PRE_RELEASE }}

      - name: Upload to CurseForge
        run: ./gradlew curseforge
        env:
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
          RELEASE_TYPE: ${{ env.RELEASE_TYPE }}

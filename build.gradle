plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id "com.github.gmazzo.buildconfig" version "3.0.3"
}

apply plugin: 'idea'
apply plugin: 'eclipse'

version = "${minecraft_version}-${mod_version}"
group = "${mod_base_package}.${mod_id}"
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

loom {
    mixin {
        defaultRefmapName = "${mod_id}.refmap.json"
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
    maven { url = "https://maven.tterrag.com/" } // Registrate and Flywheel
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://mvn.devos.one/releases/" }
    maven { url = "https://maven.saps.dev/minecraft" }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://cursemaven.com" }
}

dependencies {
    minecraft("com.mojang:minecraft:${minecraft_version}")
    mappings(loom.officialMojangMappings())

    implementation("com.google.code.findbugs:jsr305:3.0.2")

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    modApi("com.simibubi.create:create-fabric-1.19.2:${create_version}") { transitive = false }
    modApi("com.tterrag.registrate_fabric:Registrate:MC1.18.2-1.1.5") { transitive = false }
    modApi("dev.latvian.mods:kubejs-fabric:${kubejs_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${mod_id}.mixins.json"
        ])
    }
}

processResources {
    def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', 'fabric.mod.json']
    def replaceProperties = [
            mod_id            : mod_id,
            mod_name          : mod_name,
            mod_version       : mod_version,
            mod_authors       : mod_authors,
            mod_description   : mod_description,
            mod_credits       : mod_credits,
            minecraft_version : minecraft_version,
            forge_min_version : forge_min_version,
            create_min_version: create_min_version,
            kubejs_min_version: kubejs_min_version,
            license           : license,
            github_user       : github_user,
            github_repo       : github_repo]

    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

buildConfig {
    buildConfigField 'String', 'MOD_ID', "\"${mod_id}\""
    buildConfigField 'String', 'MOD_VERSION', "\"${mod_version}\""
    buildConfigField 'String', 'MOD_NAME', "\"${mod_name}\""

    packageName = project.group
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = 17
}

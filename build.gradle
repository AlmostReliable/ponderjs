buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath(group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true) { exclude group: 'org.apache.logging.log4j' }
        classpath 'org.apache.logging.log4j:log4j-api:2.11.2'
        classpath 'org.apache.logging.log4j:log4j-core:2.11.2'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id "com.github.gmazzo.buildconfig" version "3.0.3"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'
apply plugin: 'eclipse'

version = "${minecraft_version}-${mod_version}"
group = "${mod_base_package}.${mod_id}"
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "--debug", "--stacktrace", "--scan", "-mixin.config=${mod_id}.mixins.json".toString()
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('server')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args "--mod", mod_id, "--all", "--output", file('src/generated/resources/'), "--existing", file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://maven.tterrag.com/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url 'https://jitpack.io/'
    }
    maven {
        // location of the maven that hosts JEI files
        name "Progwml6 maven"
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        url "https://maven.blamejared.com"
    }
    maven {
        url = "https://maven.architectury.dev"
    }
    maven {
        url "https://maven.saps.dev/minecraft"
    }
    maven {
        url "https://maven.blamejared.com"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    implementation fg.deobf("com.simibubi.create:Create:${create_version}")
    implementation fg.deobf("com.jozufozu.flywheel:Flywheel-Forge:${flywheel_version}")

    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : mod_version,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${mod_id}.mixins.json"
        ])
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

processResources {
    def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
    def replaceProperties = [
            mod_id            : mod_id,
            mod_name          : mod_name,
            mod_version       : mod_version,
            mod_authors       : mod_authors,
            mod_description   : mod_description,
            mod_credits       : mod_credits,
            minecraft_version : minecraft_version,
            forge_min_version : forge_min_version,
            create_min_version: create_min_version,
            kubejs_min_version: kubejs_min_version,
            license           : license,
            github_user       : github_user,
            github_repo       : github_repo]

    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

artifacts {
    archives deobfJar
}

build.dependsOn deobfJar

buildConfig {
    buildConfigField 'String', 'MOD_ID', "\"${mod_id}\""
    buildConfigField 'String', 'MOD_VERSION', "\"${mod_version}\""
    buildConfigField 'String', 'MOD_NAME', "\"${mod_name}\""

    version = mod_version
    packageName = project.group
}

curseforge {
    if (System.getenv('CF_API_KEY') != null) {
        // GitHub actions
        apiKey = System.getenv('CF_API_KEY')
    } else {
        // error prevention
        apiKey = "none"
    }
    def RELEASE_TYPE
    if (System.getenv('RELEASE_TYPE') == null || System.getenv('RELEASE_TYPE') == '') {
        RELEASE_TYPE = "release"
    } else {
        RELEASE_TYPE = System.getenv('RELEASE_TYPE')
    }
    project {
        id = project_id
        changelogType = 'markdown'
        changelog = "The whole changelog can be found [here](https://github.com/${github_user}/${github_repo}/blob/${github_branch}/CHANGELOG.md)."
        releaseType = RELEASE_TYPE
        addGameVersion minecraft_version

        mainArtifact(jar) {
            if (RELEASE_TYPE == 'release') {
                displayName = "${mod_name}-${minecraft_version}-${mod_version}"
            } else {
                displayName = "${mod_name}-${minecraft_version}-${mod_version}-${RELEASE_TYPE}"
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
jar.finalizedBy('reobfJar')
